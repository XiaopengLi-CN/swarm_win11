#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
seed_setting_guide.py - 随机种子设置指南
详细说明如何在benchmark_baselines.py中设置随机种子
"""

def print_seed_setting_guide():
    """
    打印随机种子设置指南
    """
    print("=" * 70)
    print("benchmark_baselines.py 随机种子设置指南")
    print("=" * 70)
    
    print("\n📍 当前代码中的种子设置位置:")
    print("   文件: benchmark_baselines.py")
    print("   位置: 第50行")
    print("   代码: np.random.seed(int(seed))")
    print("   说明: 使用运行编号(0-4)作为种子")
    
    print("\n🔧 可以设置随机种子的地方:")
    
    print("\n1️⃣ 全局种子设置 (推荐)")
    print("   位置: 文件开头")
    print("   代码:")
    print("   ```python")
    print("   import numpy as np")
    print("   GLOBAL_SEED = 42  # 设置全局种子")
    print("   np.random.seed(GLOBAL_SEED)  # 在文件开头设置")
    print("   ```")
    print("   优点: 简单，所有运行使用相同基础种子")
    print("   缺点: 可能影响并行处理的随机性")
    
    print("\n2️⃣ 在Algorithm_Evaluator中设置 (当前方法)")
    print("   位置: 第50行")
    print("   当前代码:")
    print("   ```python")
    print("   for seed in range(n_reps):")
    print("       np.random.seed(int(seed))  # 使用0,1,2,3,4")
    print("   ```")
    print("   修改建议:")
    print("   ```python")
    print("   for seed in range(n_reps):")
    print("       # 方法A: 全局种子 + 运行编号")
    print("       combined_seed = GLOBAL_SEED + seed")
    print("       np.random.seed(combined_seed)")
    print("       ")
    print("       # 方法B: 基于函数和实例的种子")
    print("       func_id = func.meta_data.problem_id")
    print("       instance_id = func.meta_data.instance")
    print("       combined_seed = func_id * 1000 + instance_id * 100 + seed")
    print("       np.random.seed(combined_seed)")
    print("   ```")
    
    print("\n3️⃣ 在run_optimizer函数中设置")
    print("   位置: 第64行之后")
    print("   代码:")
    print("   ```python")
    print("   def run_optimizer(temp):")
    print("       algname, fid, iid, dim = temp")
    print("       ")
    print("       # 基于运行参数设置种子")
    print("       run_seed = fid * 10000 + iid * 100 + dim")
    print("       np.random.seed(run_seed)")
    print("       print(f'运行种子: {run_seed}')")
    print("   ```")
    print("   优点: 每个(函数,实例,维度)组合有唯一种子")
    print("   缺点: 不同运行可能产生相同结果")
    
    print("\n4️⃣ 在ModularCMAES构造函数中设置")
    print("   位置: 第55行")
    print("   注意: ModularCMAES可能不支持seed参数")
    print("   代码:")
    print("   ```python")
    print("   # 在创建ModularCMAES之前设置种子")
    print("   np.random.seed(seed_value)")
    print("   c = ModularCMAES(func, d=func.meta_data.n_variables, ...)")
    print("   ```")
    
    print("\n🎯 推荐的种子设置策略:")
    
    print("\n策略1: 确定性可重复 (推荐用于调试)")
    print("   ```python")
    print("   # 在文件开头")
    print("   GLOBAL_SEED = 42")
    print("   ")
    print("   # 在Algorithm_Evaluator中")
    print("   for seed in range(n_reps):")
    print("       func_id = func.meta_data.problem_id")
    print("       instance_id = func.meta_data.instance")
    print("       combined_seed = GLOBAL_SEED + func_id * 1000 + instance_id * 100 + seed")
    print("       np.random.seed(combined_seed)")
    print("       print(f'种子: {combined_seed}')")
    print("   ```")
    print("   优点: 完全可重复，便于调试")
    print("   缺点: 结果可能不够随机")
    
    print("\n策略2: 半随机 (推荐用于生产)")
    print("   ```python")
    print("   # 在文件开头")
    print("   import time")
    print("   BASE_SEED = int(time.time()) % 10000  # 基于时间的种子")
    print("   ")
    print("   # 在Algorithm_Evaluator中")
    print("   for seed in range(n_reps):")
    print("       func_id = func.meta_data.problem_id")
    print("       instance_id = func.meta_data.instance")
    print("       combined_seed = BASE_SEED + func_id * 1000 + instance_id * 100 + seed")
    print("       np.random.seed(combined_seed)")
    print("   ```")
    print("   优点: 有一定随机性，但可重复")
    print("   缺点: 需要记录BASE_SEED")
    
    print("\n策略3: 完全随机 (当前行为)")
    print("   ```python")
    print("   # 不设置种子，或使用")
    print("   np.random.seed(None)")
    print("   ```")
    print("   优点: 真正的随机性")
    print("   缺点: 结果不可重复")
    
    print("\n📝 具体修改步骤:")
    print("   1. 在文件开头添加全局种子变量")
    print("   2. 修改第50行的种子设置逻辑")
    print("   3. 添加种子值的打印输出")
    print("   4. 测试确保结果可重复")
    
    print("\n🔍 验证种子设置是否生效:")
    print("   ```python")
    print("   # 在设置种子后立即测试")
    print("   np.random.seed(42)")
    print("   test_rand1 = np.random.random()")
    print("   np.random.seed(42)")
    print("   test_rand2 = np.random.random()")
    print("   print(f'种子测试: {test_rand1 == test_rand2}')")
    print("   ```")
    
    print("\n⚠️ 注意事项:")
    print("   1. 并行处理时，每个进程的随机状态独立")
    print("   2. 设置种子会影响所有后续的随机数生成")
    print("   3. 不同算法可能需要不同的种子策略")
    print("   4. 建议记录使用的种子值以便复现结果")
    
    print("\n" + "=" * 70)

if __name__ == "__main__":
    print_seed_setting_guide()
